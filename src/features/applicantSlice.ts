import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit'
import axios from '../axiosConfig'

// Define the initial state for the slice
interface ApplicantState {
  data: any
  status: 'idle' | 'loading' | 'succeeded' | 'failed'
  error: string | null
}

const initialState: ApplicantState = {
  data: {},
  status: 'idle',
  error: null,
}

// Define async thunk for fetching applicant data
// export const fetchApplicant = createAsyncThunk('applicant/fetch', async () => {
//   const response = await fetch('/awesome/applicant')
//   console.log(response)

//   if (!response.ok) {
//     throw new Error('Network response was not ok')
//   }

//   const data = await response.json()
//   console.log(data) // Log fetched data here
//   return data
// })

export const fetchApplicant = createAsyncThunk('applicant/fetch', async () => {
  const response = await axios.get('/awesome/applicant')
  console.log(response)

  const data = response.data
  console.log(data) // Log fetched data here
  return data
})

// Define the slice using the createSlice function
const applicantSlice = createSlice({
  name: 'applicant',
  initialState,
  reducers: {
    // Define additional actions here
    updateName: (state, action: PayloadAction<string>) => {
      state.data.name = action.payload
    },
    updateEmail: (state, action: PayloadAction<string>) => {
      state.data.email = action.payload
    },
  },
  // Define the extra reducers that handle the async actions
  extraReducers: (builder) => {
    builder
      // Handle the "pending" action
      .addCase(fetchApplicant.pending, (state) => {
        state.status = 'loading'
      })
      // Handle the "fulfilled" action
      .addCase(
        fetchApplicant.fulfilled,
        (state, action: PayloadAction<any>) => {
          state.status = 'succeeded'
          state.data = action.payload
        }
      )
      // Handle the "rejected" action
      .addCase(
        fetchApplicant.rejected,
        (state, action: PayloadAction<unknown, string, any, any>) => {
          state.status = 'failed'
          state.error = action.payload as string
        }
      )
  },
})

// Export the reducer and any action creators generated by createSlice
export const { updateName, updateEmail } = applicantSlice.actions
export default applicantSlice.reducer
